# Generated by Django 5.1.4 on 2025-01-01 04:40

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Months',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month_name', models.CharField(max_length=10, verbose_name='Name')),
                ('month_index', models.IntegerField(default=0, verbose_name='Index')),
            ],
            options={
                'verbose_name': 'Month',
                'verbose_name_plural': 'Months',
                'ordering': ['month_index'],
            },
        ),
        migrations.CreateModel(
            name='SelfemploymentClass2TaxConfigForTaxYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tax_applied_for_income_above', models.FloatField(default=6470)),
                ('flat_tax_amount', models.FloatField(default=158)),
            ],
            options={
                'verbose_name': 'Selfemployment Class 2 Tax Config For TaxYear',
                'verbose_name_plural': 'Selfemployment Class 2 Tax Configs For TaxYears',
            },
        ),
        migrations.CreateModel(
            name='SelfemploymentClass4TaxConfigForTaxYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basic_rate_min', models.FloatField(default=9500)),
                ('basic_rate_max', models.FloatField(default=50000)),
                ('basic_rate_tax_percentage', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('higher_rate_tax_percentage', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
            options={
                'verbose_name': 'Selfemployment Class 4 Tax Config For TaxYear',
                'verbose_name_plural': 'Selfemployment Class 4 Tax Configs For TaxYears',
            },
        ),
        migrations.CreateModel(
            name='SelfemploymentDeductionSources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('index_position', models.IntegerField(blank=True, null=True, verbose_name='Sorting order')),
                ('backend_identifier', models.CharField(blank=True, max_length=255, null=True, verbose_name='Identifier for application logic')),
            ],
            options={
                'verbose_name': 'Deduction Source',
                'verbose_name_plural': 'Deduction Sources',
                'ordering': [models.OrderBy(models.F('index_position'), nulls_last=True)],
            },
        ),
        migrations.CreateModel(
            name='SelfemploymentDeductionsPerTaxYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0)),
                ('addition', models.FloatField(default=0)),
                ('disposal', models.FloatField(default=0)),
                ('allowance_percentage', models.FloatField(default=18, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('personal_usage_percentage', models.FloatField(default=20, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('note', models.TextField(default='')),
            ],
            options={
                'verbose_name': 'Deductions Per Tax Year',
                'verbose_name_plural': 'Deductions Per Tax Year',
                'ordering': [models.OrderBy(models.F('deduction_source__index_position'), nulls_last=True)],
            },
        ),
        migrations.CreateModel(
            name='SelfemploymentExpenseSources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('default_personal_usage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('index_position', models.IntegerField(blank=True, null=True, verbose_name='Sorting order')),
                ('backend_identifier', models.CharField(blank=True, max_length=255, null=True, verbose_name='Identifier for application logic')),
            ],
            options={
                'verbose_name': 'Expense Source',
                'verbose_name_plural': 'Expense Sources',
                'ordering': [models.OrderBy(models.F('index_position'), nulls_last=True)],
            },
        ),
        migrations.CreateModel(
            name='SelfemploymentExpensesPerTaxYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0)),
                ('personal_usage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('note', models.TextField(default='')),
                ('percentage_for_office_and_admin_charge_amount_value', models.FloatField(default=100, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('percentage_for_fuel_amount_value', models.FloatField(default=18, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
            options={
                'verbose_name': 'Expense Per Tax Year',
                'verbose_name_plural': 'Expenses Per Tax Year',
                'ordering': [models.OrderBy(models.F('expense_source__index_position'), nulls_last=True)],
            },
        ),
        migrations.CreateModel(
            name='SelfemploymentIncomeSources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('index_position', models.IntegerField(blank=True, null=True, verbose_name='Sorting order')),
                ('backend_identifier', models.CharField(blank=True, max_length=255, null=True, verbose_name='Identifier for application logic')),
            ],
            options={
                'verbose_name': 'Income Source',
                'verbose_name_plural': 'Income Sources',
                'ordering': [models.OrderBy(models.F('index_position'), nulls_last=True)],
            },
        ),
        migrations.CreateModel(
            name='SelfemploymentIncomesPerTaxYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0)),
                ('comission', models.FloatField(default=0)),
                ('note', models.TextField(default='')),
            ],
            options={
                'verbose_name': 'Income Per Tax Year',
                'verbose_name_plural': 'Incomes Per Tax Year',
                'ordering': [models.OrderBy(models.F('income_source__index_position'), nulls_last=True)],
            },
        ),
        migrations.CreateModel(
            name='SelfemploymentUkTaxConfigForTaxYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('personal_allowance_limit', models.FloatField(default=100000, null=True)),
                ('one_pound_reduction_from_PA_earned_over_PAL', models.FloatField(default=2, null=True)),
                ('personal_allowance', models.FloatField(default=12570)),
                ('basic_rate_max', models.FloatField(default=37700)),
                ('higher_rate_max', models.FloatField(default=150000)),
                ('basic_rate_tax_percentage', models.FloatField(default=20, null=True)),
                ('higher_rate_tax_percentage', models.FloatField(default=40, null=True)),
                ('additional_rate_tax_percentage', models.FloatField(default=45, null=True)),
            ],
            options={
                'verbose_name': 'Selfemployment UK Tax Config For TaxYear',
                'verbose_name_plural': 'Selfemployment UK Tax Configs For TaxYears',
            },
        ),
        migrations.CreateModel(
            name='TaxableIncomeSourceForSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0)),
                ('paid_income_tax_amount', models.FloatField(default=0)),
                ('note', models.TextField(default='')),
            ],
            options={
                'verbose_name': 'Taxable Income Source For Submission',
                'verbose_name_plural': 'Taxable Income Sources For Submissions',
                'ordering': [models.OrderBy(models.F('taxable_income_source__index_position'), nulls_last=True)],
            },
        ),
        migrations.CreateModel(
            name='TaxableIncomeSources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='New Taxable Income Source', max_length=255)),
                ('apply_uk_tax', models.BooleanField()),
                ('apply_class2_tax', models.BooleanField()),
                ('apply_class4_tax', models.BooleanField()),
                ('index_position', models.IntegerField(blank=True, null=True, verbose_name='Sorting order')),
                ('backend_identifier', models.CharField(blank=True, max_length=255, null=True, verbose_name='Identifier for application logic')),
            ],
            options={
                'verbose_name': 'Taxable Income Source',
                'verbose_name_plural': 'Taxable Income Sources',
                'ordering': [models.OrderBy(models.F('index_position'), nulls_last=True)],
            },
        ),
    ]
