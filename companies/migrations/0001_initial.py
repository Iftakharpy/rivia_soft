# Generated by Django 5.1.4 on 2025-01-01 04:40

import django.core.validators
import django.utils.timezone
import re
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AutoCreatedSelfassesmentTracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(choices=[('nino', 'NINO'), ('utr', 'UTR'), ('hmrc_agent', 'HMRC_AGENT')], max_length=15)),
            ],
            options={
                'verbose_name': 'Auto Created Selfassesment Tracker',
                'verbose_name_plural': 'Auto Created Selfassesment Trackers',
            },
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('issue_id', models.AutoField(db_index=True, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Issue Id')),
                ('description', models.TextField(db_index=True, default='New Issue', max_length=255, verbose_name='Type Name')),
            ],
            options={
                'verbose_name': 'Issue',
                'verbose_name_plural': 'Issues',
            },
        ),
        migrations.CreateModel(
            name='Limited',
            fields=[
                ('client_id', models.AutoField(db_index=True, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Unique ID for client')),
                ('client_rating', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Client Rating(ðŸ”·)')),
                ('date_of_registration', models.DateField(default=django.utils.timezone.now, null=True, verbose_name='Registration date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active Status')),
                ('is_payroll', models.BooleanField(default=False, verbose_name='Is Payroll')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='Remarks')),
                ('client_file_number', models.DecimalField(decimal_places=3, max_digits=19, null=True, unique=True, verbose_name='File Number')),
                ('client_name', models.CharField(db_index=True, max_length=100, verbose_name='Business Name')),
                ('company_reg_number', models.CharField(db_index=True, max_length=100, null=True, unique=True, verbose_name='Company Registration Number')),
                ('company_auth_code', models.CharField(blank=True, db_index=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(code='Invalid company authentication code', message='Enter 6 digit alphanumeric code', regex=re.compile('^[A-Za-z0-9]{6}$'))], verbose_name='Company Authentication Code')),
                ('payment_method', models.CharField(blank=True, choices=[(None, '--------------'), ('CASH', 'CASH'), ('DIRECT DEBIT', 'DIRECT DEBIT'), ('BANK TRANSFER', 'BANK TRANSFER')], default=None, max_length=55, null=True, verbose_name='Payment Method')),
                ('direct_debit_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=19, null=True, verbose_name='Direct Debit Amount')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('PAYE_number', models.CharField(blank=True, db_index=True, max_length=255, null=True, unique=True, verbose_name='PAYE Number')),
                ('director_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Director Name')),
                ('director_phone_number', models.CharField(db_index=True, max_length=255, null=True, verbose_name='Director Phone numbers')),
                ('director_email', models.EmailField(blank=True, max_length=320, null=True, verbose_name='Director Email')),
                ('director_address', models.TextField(blank=True, db_index=True, null=True, verbose_name='Director Address')),
                ('director_post_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Director Postal Code')),
                ('gateway_id', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='Director Gateway ID')),
                ('gateway_password', models.CharField(blank=True, max_length=255, null=True, verbose_name='Gateway Password')),
                ('AOR_number', models.CharField(blank=True, db_index=True, max_length=511, null=True, verbose_name='Account Office Reference number')),
                ('business_phone_number', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='Business Phone numbers')),
                ('business_email', models.EmailField(blank=True, max_length=320, null=True, verbose_name='Business Email')),
                ('business_address', models.TextField(blank=True, db_index=True, null=True, verbose_name='Business Address')),
                ('business_post_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Business Postal Code')),
                ('HMRC_referance', models.CharField(blank=True, max_length=1023, null=True, verbose_name='HMRC Referance')),
                ('UTR', models.CharField(blank=True, db_index=True, max_length=10, null=True, unique=True, validators=[django.core.validators.RegexValidator(code='Invalid UTR', message='Enter 10 digit UTR Number', regex=re.compile('^[0-9]{10}$'))], verbose_name='UTR')),
                ('NINO', models.CharField(blank=True, max_length=9, null=True, unique=True, validators=[django.core.validators.RegexValidator(code='Invalid NINO', message='Enter 9 chars long NINO.', regex=re.compile('^(?!BG|GB|KN|NK|NT|TN|ZZ)[ABCEGHJKLMNOPRSTWXYZ][ABCEGHJKLMNPRSTWXYZ][0-9]{6}[ABCD]$', 2))], verbose_name='NINO')),
                ('HMRC_agent', models.BooleanField(default=False, verbose_name='HMRC agent active status')),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Name of Bank')),
                ('bank_account_number', models.CharField(blank=True, max_length=8, null=True, validators=[django.core.validators.RegexValidator(code='Invalid Bank Account', message='Enter 8 digit Bank Account Number', regex=re.compile('^[0-9]{8}$'))], verbose_name='Account number in Bank')),
                ('bank_sort_code', models.CharField(blank=True, max_length=6, null=True, validators=[django.core.validators.RegexValidator(code='Invalid Sort Code', message='Enter 6 digit Sort Code', regex=re.compile('^[0-9]{6}$'))], verbose_name='Bank Sort Code')),
                ('bank_account_holder_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Bank Account Holder Name')),
                ('vat', models.CharField(blank=True, max_length=255, null=True, verbose_name='VAT')),
            ],
            options={
                'verbose_name': 'Limited',
                'verbose_name_plural': 'Limiteds',
                'ordering': ['-date_of_registration'],
            },
        ),
        migrations.CreateModel(
            name='LimitedConfirmationStatementTracker',
            fields=[
                ('statement_id', models.AutoField(db_index=True, editable=False, primary_key=True, serialize=False, verbose_name='Statement ID')),
                ('company_house_deadline', models.DateField(null=True, verbose_name='CH Deadline')),
                ('is_submitted', models.BooleanField(default=False, verbose_name='Is Submitted')),
                ('submitted_by', models.TextField(blank=True, default='', null=True, verbose_name='Submitted By')),
                ('submission_date', models.DateField(blank=True, null=True, verbose_name='Submission Date')),
                ('is_documents_uploaded', models.BooleanField(default=False, verbose_name='Is Documents Uploaded')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='Remarks')),
                ('last_updated_on', models.DateTimeField(default=django.utils.timezone.now, null=True, verbose_name='Last Updated On')),
            ],
            options={
                'verbose_name': 'Limited Confirmation Statement',
                'verbose_name_plural': 'Limited Confirmation Statements',
                'ordering': ['company_house_deadline'],
            },
        ),
        migrations.CreateModel(
            name='LimitedOnboardingTasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_status', models.CharField(choices=[('NeedToDo', 'Need to do'), ('InProgress', 'In Progress'), ('Done', 'Done'), ('NotApplicable', 'Not Applicable')], default='NotApplicable', max_length=255, null=True, verbose_name='Task Status')),
                ('note', models.TextField(blank=True, default='', null=True, verbose_name='Note')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Limited Onboarding Task',
                'verbose_name_plural': 'Limited Onboarding Tasks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LimitedSubmissionDeadlineTracker',
            fields=[
                ('submission_id', models.AutoField(db_index=True, editable=False, primary_key=True, serialize=False, verbose_name='Submission ID')),
                ('status', models.CharField(blank=True, choices=[(None, '--------------'), ('DOCUMENT REQUESTED', 'DOCUMENT REQUESTED'), ('WAITING FOR INFORMATION', 'WAITING FOR INFORMATION'), ('DOCUMENT RECEIVED', 'DOCUMENT RECEIVED'), ('PROCESSING', 'PROCESSING'), ('READY FOR SUBMISSION', 'READY FOR SUBMISSION'), ('WAITING FOR CONFIRMATION', 'WAITING FOR CONFIRMATION'), ('COMPLETED', 'COMPLETED')], default=None, max_length=55, null=True, verbose_name='Status')),
                ('period_start_date', models.DateField(blank=True, null=True, verbose_name='Period Start')),
                ('period', models.DateField(blank=True, null=True, verbose_name='Period End')),
                ('our_deadline', models.DateField(blank=True, null=True, verbose_name='HMRC Deadline')),
                ('is_submitted_hmrc', models.BooleanField(default=False, verbose_name='Is Submitted(HM)')),
                ('submission_date_hmrc', models.DateField(blank=True, null=True, verbose_name='Submission Date(HM)')),
                ('HMRC_deadline', models.DateField(null=True, verbose_name='Deadline(CH)')),
                ('is_submitted', models.BooleanField(default=False, verbose_name='Is Submitted(CH)')),
                ('submission_date', models.DateField(blank=True, null=True, verbose_name='Submission Date(CH)')),
                ('is_documents_uploaded', models.BooleanField(default=False, verbose_name='Is Documents Uploaded')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='Remarks')),
                ('payment_status', models.CharField(choices=[('NOT PAID', 'NOT PAID'), ('INVOICE SENT', 'INVOICE SENT'), ('PARTIALLY PAID', 'PARTIALLY PAID'), ('PAID', 'PAID')], default='NOT PAID', max_length=55, verbose_name='Payment Status')),
                ('payment_method', models.CharField(blank=True, choices=[(None, '--------------'), ('CASH', 'CASH'), ('CARD', 'CARD'), ('DIRECT DEBIT', 'DIRECT DEBIT'), ('BANK TRANSFER', 'BANK TRANSFER')], default=None, max_length=55, null=True, verbose_name='Payment Method')),
                ('charged_amount', models.BigIntegerField(blank=True, default=0, null=True, verbose_name='Charged Amount')),
                ('received_amount', models.BigIntegerField(blank=True, default=0, null=True, verbose_name='Received Amount')),
                ('balance_amount', models.BigIntegerField(blank=True, default=0, null=True, verbose_name='Balance')),
                ('last_updated_on', models.DateTimeField(auto_now=True, null=True, verbose_name='Last Updated On')),
            ],
            options={
                'verbose_name': 'Limited Submission',
                'verbose_name_plural': 'Limited Submissions',
                'ordering': ['-HMRC_deadline', '-our_deadline'],
            },
        ),
        migrations.CreateModel(
            name='LimitedTracker',
            fields=[
                ('tracker_id', models.AutoField(db_index=True, primary_key=True, serialize=False, verbose_name='Tracker ID')),
                ('creation_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, null=True, verbose_name='Creation Datetime')),
                ('job_description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('remarks', models.TextField(blank=True, default='', null=True, verbose_name='Remarks')),
                ('has_issue', models.BooleanField(default=False, verbose_name='Has Issue')),
                ('deadline', models.DateField(default=django.utils.timezone.now, null=True, verbose_name='Deadline')),
                ('is_completed', models.BooleanField(blank=True, default=False, verbose_name='Completed')),
                ('complete_date', models.DateField(blank=True, null=True, verbose_name='Complete Date')),
                ('new_customer', models.BooleanField(blank=True, default=False, editable=False, null=True, verbose_name='New customer')),
            ],
            options={
                'verbose_name': 'Limited Tracker',
                'verbose_name_plural': 'Limited Trackers',
                'ordering': ['-deadline'],
            },
        ),
        migrations.CreateModel(
            name='LimitedVATTracker',
            fields=[
                ('vat_id', models.AutoField(db_index=True, editable=False, primary_key=True, serialize=False, verbose_name='VAT Tracker ID')),
                ('period_start', models.DateField(null=True, verbose_name='Period Start')),
                ('period_end', models.DateField(null=True, verbose_name='Period End')),
                ('HMRC_deadline', models.DateField(blank=True, null=True, verbose_name='HMRC Deadline')),
                ('is_submitted', models.BooleanField(default=False, verbose_name='Is Submitted')),
                ('submitted_by', models.TextField(blank=True, default='', null=True, verbose_name='Submitted By')),
                ('submission_date', models.DateField(blank=True, null=True, verbose_name='Submission Date')),
                ('is_documents_uploaded', models.BooleanField(default=False, verbose_name='Is Documents Uploaded')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='Remarks')),
                ('last_updated_on', models.DateTimeField(default=django.utils.timezone.now, null=True, verbose_name='Last Updated On')),
            ],
            options={
                'verbose_name': 'Limited VAT Tracker',
                'verbose_name_plural': 'Limited VAT Trackers',
                'ordering': ['-HMRC_deadline'],
            },
        ),
        migrations.CreateModel(
            name='OnboardingTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255)),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Onboarding Task',
                'verbose_name_plural': 'Onboarding Tasks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Selfassesment',
            fields=[
                ('client_id', models.AutoField(db_index=True, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Unique ID for client')),
                ('client_rating', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Client Rating(ðŸ”·)')),
                ('date_of_registration', models.DateField(default=django.utils.timezone.now, verbose_name='Registration date')),
                ('is_updated', models.BooleanField(default=True, editable=False, verbose_name='Update Status')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active Status')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='Remarks')),
                ('client_file_number', models.DecimalField(decimal_places=3, max_digits=19, null=True, unique=True, verbose_name='File Number')),
                ('client_name', models.CharField(db_index=True, max_length=100, verbose_name='Full Name / Business Name')),
                ('start_date', models.DateField(blank=True, default=None, null=True, verbose_name='Selfassesment Start Date')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('PAYE_number', models.CharField(blank=True, db_index=True, max_length=255, null=True, unique=True, verbose_name='PAYE Number')),
                ('personal_phone_number', models.CharField(db_index=True, max_length=255, null=True, verbose_name='Personal Phone numbers')),
                ('personal_email', models.EmailField(blank=True, max_length=320, null=True, verbose_name='Personal Email')),
                ('personal_address', models.TextField(blank=True, db_index=True, null=True, verbose_name='Personal Address')),
                ('personal_post_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Personal Postal Code')),
                ('gateway_id', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='Personal Gateway ID')),
                ('gateway_password', models.CharField(blank=True, max_length=255, null=True, verbose_name='Gateway Password')),
                ('driving_license_expiry_date', models.DateField(blank=True, null=True, verbose_name='Driving License Expiry Date')),
                ('passport_expiry_date', models.DateField(blank=True, null=True, verbose_name='Passport Expiry Date')),
                ('AOR_number', models.CharField(blank=True, db_index=True, max_length=511, null=True, verbose_name='Account Office Reference number')),
                ('business_phone_number', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='Business Phone numbers')),
                ('business_email', models.EmailField(blank=True, max_length=320, null=True, verbose_name='Business Email')),
                ('business_address', models.TextField(blank=True, db_index=True, null=True, verbose_name='Business Address')),
                ('business_post_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Business Postal Code')),
                ('HMRC_referance', models.CharField(blank=True, max_length=1023, null=True, verbose_name='HMRC Referance')),
                ('UTR', models.CharField(blank=True, db_index=True, max_length=10, null=True, unique=True, validators=[django.core.validators.RegexValidator(code='Invalid UTR', message='Enter 10 digit UTR Number', regex=re.compile('^[0-9]{10}$'))], verbose_name='UTR')),
                ('NINO', models.CharField(blank=True, max_length=9, null=True, unique=True, validators=[django.core.validators.RegexValidator(code='Invalid NINO', message='Enter 9 chars long NINO.', regex=re.compile('^(?!BG|GB|KN|NK|NT|TN|ZZ)[ABCEGHJKLMNOPRSTWXYZ][ABCEGHJKLMNPRSTWXYZ][0-9]{6}[ABCD]$', 2))], verbose_name='NINO')),
                ('HMRC_agent', models.BooleanField(default=False, verbose_name='HMRC agent active status')),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Name of Bank')),
                ('bank_account_number', models.CharField(blank=True, max_length=8, null=True, validators=[django.core.validators.RegexValidator(code='Invalid Bank Account', message='Enter 8 digit Bank Account Number', regex=re.compile('^[0-9]{8}$'))], verbose_name='Account number in Bank')),
                ('bank_sort_code', models.CharField(blank=True, max_length=6, null=True, validators=[django.core.validators.RegexValidator(code='Invalid Sort Code', message='Enter 6 digit Sort Code', regex=re.compile('^[0-9]{6}$'))], verbose_name='Bank Sort Code')),
                ('bank_account_holder_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Bank Account Holder Name')),
            ],
            options={
                'verbose_name': 'Selfassesment',
                'verbose_name_plural': 'Selfassesments',
                'ordering': ['-date_of_registration'],
            },
        ),
        migrations.CreateModel(
            name='SelfassesmentAccountSubmission',
            fields=[
                ('submission_id', models.AutoField(db_index=True, editable=False, primary_key=True, serialize=False, verbose_name='Submission ID')),
                ('request_date', models.DateField(default=django.utils.timezone.now, null=True, verbose_name='Request Date')),
                ('status', models.CharField(choices=[('REQUEST', 'REQUEST'), ('PRIORITY', 'PRIORITY'), ('PROCESSING', 'PROCESSING'), ('BOOK APPOINTMENT', 'BOOK APPOINTMENT'), ('READY FOR SUBMIT', 'READY FOR SUBMIT'), ('WAITING FOR INFORMATION', 'WAITING FOR INFORMATION'), ('WAITING FOR CONFIRMATION', 'WAITING FOR CONFIRMATION'), ('SUBMITTED', 'SUBMITTED'), ('NOT ISSUED', 'NOT ISSUED'), ('CLIENT CLOSED', 'CLIENT CLOSED')], default='REQUEST', max_length=55, verbose_name='Status')),
                ('appointment_date', models.DateField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Appointment Date')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('is_submitted', models.BooleanField(blank=True, default=False, verbose_name='Is Submitted')),
                ('is_data_collected', models.BooleanField(blank=True, default=False, verbose_name='Is Data Collected')),
                ('payment_status', models.CharField(choices=[('NOT PAID', 'NOT PAID'), ('PARTIALLY PAID', 'PARTIALLY PAID'), ('PAID', 'PAID')], default='NOT PAID', max_length=55, verbose_name='Payment Status')),
                ('payment_method', models.CharField(blank=True, choices=[(None, '--------------'), ('CASH', 'CASH'), ('DIRECT DEBIT', 'DIRECT DEBIT'), ('BANK TRANSFER', 'BANK TRANSFER'), ('CARD', 'CARD')], default=None, max_length=55, null=True, verbose_name='Payment Method')),
                ('paid_amount', models.BigIntegerField(blank=True, null=True, verbose_name='Amount Paid')),
                ('unique_public_view_key', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='Unique Public View Key')),
                ('last_updated_on', models.DateTimeField(default=django.utils.timezone.now, null=True, verbose_name='Last Updated On')),
            ],
            options={
                'verbose_name': 'Selfassesment Submission',
                'verbose_name_plural': 'Selfassesment Submissions',
                'ordering': ['-appointment_date'],
            },
        ),
        migrations.CreateModel(
            name='SelfassesmentAccountSubmissionTaxYear',
            fields=[
                ('id', models.AutoField(db_index=True, editable=False, primary_key=True, serialize=False, verbose_name='Tax Year ID')),
                ('tax_year', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator(message='Maintain the format(dddd-dddd) for tax years. Ex: 2020-2021', regex=re.compile('^\\d{4}-\\d{4}$'))], verbose_name='Tax Year')),
            ],
            options={
                'verbose_name': 'Selfassesment Tax Year',
                'verbose_name_plural': 'Selfassesment Tax Years',
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='SelfassesmentTracker',
            fields=[
                ('tracker_id', models.AutoField(db_index=True, primary_key=True, serialize=False, verbose_name='Tracker ID')),
                ('creation_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, null=True, verbose_name='Creation Datetime')),
                ('job_description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('remarks', models.TextField(blank=True, default='', null=True, verbose_name='Remarks')),
                ('has_issue', models.BooleanField(default=False, verbose_name='Has Issue')),
                ('deadline', models.DateField(default=django.utils.timezone.now, null=True, verbose_name='Deadline')),
                ('is_completed', models.BooleanField(blank=True, default=False, verbose_name='Completed')),
                ('complete_date', models.DateField(blank=True, null=True, verbose_name='Complete Date')),
                ('new_customer', models.BooleanField(blank=True, default=False, editable=False, null=True, verbose_name='New customer')),
            ],
            options={
                'verbose_name': 'Selfassesment Tracker',
                'verbose_name_plural': 'Selfassesment Trackers',
                'ordering': ['-deadline'],
            },
        ),
        migrations.CreateModel(
            name='SelfassesmentType',
            fields=[
                ('type_id', models.AutoField(db_index=True, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Selfassesment Type Id')),
                ('type_name', models.CharField(db_index=True, default='New Selfassesment Type', max_length=255, verbose_name='Type Name')),
            ],
            options={
                'verbose_name': 'Selfassesment Type',
                'verbose_name_plural': 'Selfassesment Types',
            },
        ),
        migrations.CreateModel(
            name='SelfemploymentIncomeAndExpensesDataCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uber_income', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Uber')),
                ('bolt_income', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Bolt')),
                ('free_now_income', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Free now')),
                ('other_income', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Others')),
                ('total_grant_income', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Total grant(last two) received')),
                ('employment_income', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Employment Income(Please send P60 or P45)')),
                ('income_note', models.TextField(verbose_name='Note: (Please write below where did you send documents? Email/WhatsApp)')),
                ('telephone_expense', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Telephone')),
                ('congestion_expense', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Congestion Charge')),
                ('insurance_expense', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Insurance')),
                ('MOT_expense', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='MOT')),
                ('licence_expense', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Licence Renew')),
                ('repair_expense', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Repair')),
                ('road_tax_expense', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Road Tax')),
                ('breakdown_expense', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Breakdown')),
                ('car_value_expense', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Car Value')),
                ('is_submitted', models.BooleanField(default=False, verbose_name='Ready to Submit')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TrackerHasIssues',
            fields=[
                ('id', models.AutoField(db_index=True, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Issue Id')),
            ],
        ),
    ]
